# -*- coding: utf-8 -*-
"""水質再検査（硝化槽）_異常検知.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NIpu4c8hlCXwn-vG9uTxhkYL_7Zfj0Zd
"""

import sys

def judge_value(value, thresholds):
    """値が閾値範囲内かどうかを判定する関数。"""
    lower, upper = thresholds
    if lower <= value <= upper:
        return  0  # 正常
    else:
        return 1  # 異常

def check_abnormalities(ph, do, temperature, salinity, nh4, no2, no3, ca, al, mg):
    """硝化槽の水質の異常を検知し、配列として返す関数"""
    results = []
    results.append(judge_value(ph, THRESHOLDS['pH']))
    results.append(judge_value(do, THRESHOLDS['DO']))
    results.append(judge_value(temperature, THRESHOLDS['Temperature']))
    results.append(judge_value(salinity, THRESHOLDS['Salinity']))
    results.append(judge_value(nh4, THRESHOLDS['NH4']))
    results.append(judge_value(no2, THRESHOLDS['NO2']))
    results.append(judge_value(no3, THRESHOLDS['NO3']))
    results.append(judge_value(ca, THRESHOLDS['Ca']))
    results.append(judge_value(al, THRESHOLDS['Al']))
    results.append(judge_value(mg, THRESHOLDS['Mg']))
    return results

# 硝化槽用の閾値を定義
THRESHOLDS = {
    'pH': (7.9, 8.2),
    'DO': (6, 10),  # 溶存酸素 (mg/L)
    'Temperature': (28, 29),  # 温度 (°C)
    'Salinity': (1.5, 3.5),  # 塩分濃度 (PSU)
    'NH4': (0, 5),  # アンモニウム (mg/L)
    'NO2': (1.5, 2.5),  # 亜硝酸塩 (mg/L)
    'NO3': (15, 20),  # 硝酸塩 (mg/L)
    'Ca': (280, 300),  # カルシウム (mg/L)
    'Al': (180, 200),  # アルミニウム (mg/L)
    'Mg': (700, 800),  # マグネシウム (mg/L)
}

if __name__ == "__main__":
    # コマンドライン引数から順番に取得
    ph = float(sys.argv[1])
    do = float(sys.argv[2])
    temperature = float(sys.argv[3])
    salinity = float(sys.argv[4])
    nh4 = float(sys.argv[5])
    no2 = float(sys.argv[6])
    no3 = float(sys.argv[7])
    ca = float(sys.argv[8])
    al = float(sys.argv[9])
    mg = float(sys.argv[10])

   # それぞれの値を判定
    results = {}
    results['pH'] = {'value': ph, 'status': judge_value(ph, THRESHOLDS['pH']), 'thresholds': THRESHOLDS['pH']}
    results['DO'] = {'value': do, 'status': judge_value(do, THRESHOLDS['DO']), 'thresholds': THRESHOLDS['DO']}
    results['Temperature'] = {'value': temperature, 'status': judge_value(temperature, THRESHOLDS['Temperature']), 'thresholds': THRESHOLDS['Temperature']}
    results['Salinity'] = {'value': salinity, 'status': judge_value(salinity, THRESHOLDS['Salinity']), 'thresholds': THRESHOLDS['Salinity']}
    results['NH4'] = {'value': nh4, 'status': judge_value(nh4, THRESHOLDS['NH4']), 'thresholds': THRESHOLDS['NH4']}
    results['NO2'] = {'value': no2, 'status': judge_value(no2, THRESHOLDS['NO2']), 'thresholds': THRESHOLDS['NO2']}
    results['NO3'] = {'value': no3, 'status': judge_value(no3, THRESHOLDS['NO3']), 'thresholds': THRESHOLDS['NO3']}
    results['Ca'] = {'value': ca, 'status': judge_value(ca, THRESHOLDS['Ca']), 'thresholds': THRESHOLDS['Ca']}
    results['Al'] = {'value': al, 'status': judge_value(al, THRESHOLDS['Al']), 'thresholds': THRESHOLDS['Al']}
    results['Mg'] = {'value': mg, 'status': judge_value(mg, THRESHOLDS['Mg']), 'thresholds': THRESHOLDS['Mg']}

    # 異常検知結果を配列で取得
    results = check_abnormalities(ph, do, temperature, salinity, nh4, no2, no3, ca, al, mg)
    print(results)